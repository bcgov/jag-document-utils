# This is the main workflow that creates a new image and push to Openshift image stream which in turn triggers the deployment

name: Main - Action for PROD Deployment

# Controls when the workflow will run
on:
  workflow_dispatch:

env:
  IMAGE_NAME: jag-document-utils-api
  WORKING_DIRECTORY: ./src/document-utils-api
  ENV_TAG: prod

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  push-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-24.04
    environment: ${{ github.event.inputs.env }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - name: Login to Artifactory
        uses: docker/login-action@v1
        with:
          registry: artifacts.developer.gov.bc.ca
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_PASSWORD }}
      
      # Get SHORT_SHA for the version
      - name: Get short SHA
        id: short_sha
        run: |
          echo "::set-output name=SHORT_SHA::$(git rev-parse --short HEAD)"
          echo "Short SHA: $SHORT_SHA"
      
      # Prints vital release paramters used
      - name: Print Release Variables
        run: |
          echo "Release Application: ${{env.IMAGE_NAME}}"
          echo "Release Environment: ${{env.ENV_TAG}}"
          echo "Release Git Sha: ${{ steps.short_sha.outputs.SHORT_SHA }}"
      
      #- name: Backup Prod Image
      #  working-directory: ${{env.WORKING_DIRECTORY}}
      #  run: |
      #    docker pull artifacts.developer.gov.bc.ca/d735-doc-utils/${{env.IMAGE_NAME}}:prod
      #    docker tag artifacts.developer.gov.bc.ca/d735-doc-utils/${{env.IMAGE_NAME}}:prod artifacts.developer.gov.bc.ca/d735-doc-utils/${{env.IMAGE_NAME}}:prod-backup

      - name: Pull and Retag Image
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          docker pull artifacts.developer.gov.bc.ca/d735-doc-utils/${{env.IMAGE_NAME}}:test
          docker tag artifacts.developer.gov.bc.ca/d735-doc-utils/${{env.IMAGE_NAME}}:test artifacts.developer.gov.bc.ca/d735-doc-utils/${{env.IMAGE_NAME}}:${{env.ENV_TAG}}
      
      - name: Docker Push to Artifactory
        run: |
          docker push artifacts.developer.gov.bc.ca/d735-doc-utils/${{env.IMAGE_NAME}}:${{env.ENV_TAG}}
      
      - name: Checkout ArgoCD Repo
        id: gitops
        uses: actions/checkout@v4
        with:
          repository: bcgov-c/tenant-gitops-735b8b
          ref: main
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
          path: gitops

      - name: Update Helm Values and Commit
        id: helm
        if: steps.gitops.outcome == 'success'  # Only run if the previous step (publish) was successful
        run: |
          # Clone the GitOps deployment configuration repository
          # Navigate to the directory containing your Helm values file for the environment develop -> DEV, test -> test and 
          cd gitops/charts

          # Update the Helm values file with the new image tag and version
          DATETIME=$(date +'%Y-%m-%d %H:%M:%S')  # Get current date and time

          sed -i "s/apitag: .*/apitag: ${{env.ENV_TAG}} # Image Updated on $DATETIME/" ../deploy/${{env.ENV_TAG}}_values.yaml

          sed -i "s/apiVersion: .*/apiVersion: ${{ steps.short_sha.outputs.SHORT_SHA }} # Version Updated on $DATETIME/" ../deploy/${{env.ENV_TAG}}_values.yaml
          
          # Commit and push the changes
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          
          git add .
          
          git add ../deploy/${{env.ENV_TAG}}_values.yaml
          
          # Repackage Helm Chart      

          cd doc-utils-gitops

          helm dependency build
          
          cd charts

          git add .
          
          git commit -m "Update PROD jag document utils image tag"
          git push origin main  # Update the branch name as needed
